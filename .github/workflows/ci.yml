name: CI

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop

env:
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_DB: test_db
  PGADMIN_DEFAULT_EMAIL: admin@admin.com
  PGADMIN_DEFAULT_PASSWORD: admin
  COMPOSE_PROJECT_NAME: ba-backend
  API_KEY: test_api_key
  STRIPE_SECRET_KEY: test_stripe_key
  MAIL_USERNAME: test_mail_user
  MAIL_PASSWORD: test_mail_pass
  MAIL_FROM: test@example.com
  MAIL_PORT: 587
  MAIL_SERVER: smtp.example.com

jobs:
  test-and-lint:
    runs-on: self-hosted
    timeout-minutes: 10

    steps:
      - name: Cleanup previous runs
        run: |
          # Clean up any leftover files from previous runs
          if [ -d "$GITHUB_WORKSPACE" ]; then
            sudo chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE"
            sudo find "$GITHUB_WORKSPACE" -type d -name "__pycache__" -exec rm -rf {} + || true
          fi

      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: |
          echo "Building Docker images..."
          docker compose build --no-cache fastapi
        timeout-minutes: 5

      - name: Start PostgreSQL and wait for it
        run: |
          echo "Starting PostgreSQL container..."
          docker compose up -d postgres
          
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if docker compose exec -T postgres pg_isready -U $POSTGRES_USER; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i: PostgreSQL not ready yet..."
            sleep 2
          done
          echo "PostgreSQL failed to become ready in time"
          docker compose logs postgres
          exit 1
        timeout-minutes: 2

      - name: Install dependencies and run linting
        run: |
          echo "Starting FastAPI container..."
          docker compose up -d fastapi
          
          echo "Waiting for FastAPI container to be ready..."
          for i in {1..10}; do
            if docker compose ps fastapi | grep -q "running"; then
              echo "FastAPI container is running"
              break
            fi
            echo "Waiting for FastAPI container to start... (attempt $i)"
            sleep 2
          done
          
          echo "Running linting in FastAPI container..."
          docker compose exec -T fastapi bash -c '
            pip install -r requirements.txt
            pip install flake8
            echo "[flake8]
            max-line-length = 120
            exclude = .git,__pycache__,build,dist,.venv
            max-complexity = 10
            ignore = E203, W503, E266, E712, C901, E501" > /app/.flake8
            
            flake8 . --config=/app/.flake8
          ' || {
            echo "Linting failed. Container logs:"
            docker compose logs fastapi
            exit 0
          }
        timeout-minutes: 3

      - name: Run tests
        run: |
          echo "Running tests..."
          docker compose exec -T fastapi pytest -v --cov=. --cov-report=term-missing || {
            echo "Tests failed. Container logs:"
            docker compose logs fastapi
            exit 1
          }
        timeout-minutes: 3

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up containers and volumes..."
          docker compose logs > docker-logs.txt
          docker compose down -v --remove-orphans
          
          echo "Fixing permissions..."
          sudo chown -R $(id -u):$(id -g) .
          sudo find . -type d -name "__pycache__" -exec rm -rf {} + || true
          
          echo "Docker logs from run:"
          cat docker-logs.txt

      - name: Final cleanup
        if: always()
        run: |
          # Ensure all files are owned by the runner user
          sudo chown -R $(id -u):$(id -g) .
          # Remove any remaining Docker containers and volumes
          docker compose down -v --remove-orphans || true
          # Clean up __pycache__ directories
          sudo find . -type d -name "__pycache__" -exec rm -rf {} + || true