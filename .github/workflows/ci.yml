name: CI

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop

env:
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_DB: test_db
  PGADMIN_DEFAULT_EMAIL: admin@admin.com
  PGADMIN_DEFAULT_PASSWORD: admin
  COMPOSE_PROJECT_NAME: ba-backend
  API_KEY: test_api_key
  STRIPE_SECRET_KEY: test_stripe_key
  MAIL_USERNAME: test_mail_user
  MAIL_PASSWORD: test_mail_pass
  MAIL_FROM: test@example.com
  MAIL_PORT: 587
  MAIL_SERVER: smtp.example.com

jobs:
  test-and-lint:
    runs-on: self-hosted
    timeout-minutes: 10

    steps:
      # Pre-cleanup to ensure no leftover files cause issues
      - name: Pre-cleanup
        run: |
          if [ -d "/home/jonathan/github-runners/fitboks/ba-backend/ba-backend/server/__pycache__" ]; then
            sudo rm -rf /home/jonathan/github-runners/fitboks/ba-backend/ba-backend/server/__pycache__
          fi

      # Checkout the repository
      - uses: actions/checkout@v4
        with:
          clean: true

      # Fix permissions for all files in the workspace
      - name: Fix permissions
        run: sudo chown -R $USER:$USER /home/jonathan/github-runners/fitboks/ba-backend/ba-backend

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Docker images
      - name: Build images
        run: |
          echo "Building Docker images..."
          docker compose build --no-cache fastapi
        timeout-minutes: 5

      # Start PostgreSQL and wait for it to be ready
      - name: Start PostgreSQL and wait for it
        run: |
          echo "Starting PostgreSQL container..."
          docker compose up -d postgres

          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if docker compose exec -T postgres pg_isready -U $POSTGRES_USER; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i: PostgreSQL not ready yet..."
            sleep 2
          done
          echo "PostgreSQL failed to become ready in time"
          docker compose logs postgres
          exit 1
        timeout-minutes: 2

      # Start the FastAPI container and run linting
      - name: Install dependencies and run linting
        run: |
          echo "Starting FastAPI container..."
          docker compose up -d fastapi

          echo "Waiting for FastAPI container to be ready..."
          for i in {1..10}; do
            if docker compose ps fastapi | grep -q "running"; then
              echo "FastAPI container is running"
              break
            fi
            echo "Waiting for FastAPI container to start... (attempt $i)"
            sleep 2
          done

          echo "Container status:"
          docker compose ps

          echo "Running linting in FastAPI container..."
          docker compose exec -T fastapi bash -c '
            pip install -r requirements.txt
            pip install flake8
            # Create .flake8 configuration inside container
            echo "[flake8]
            max-line-length = 120
            exclude = .git,__pycache__,build,dist,.venv
            max-complexity = 10
            ignore = E203, W503, E266, E712, C901, E501" > /app/.flake8

            # Run flake8 with the configuration
            flake8 . --config=/app/.flake8
          ' || {
            echo "Linting failed. Container logs:"
            docker compose logs fastapi
            exit 0  # Don't fail the build on linting errors for now
          }
        timeout-minutes: 3

      # Run tests
      - name: Run tests
        run: |
          echo "Running tests..."
          docker compose exec -T fastapi pytest -v --cov=. --cov-report=term-missing || {
            echo "Tests failed. Container logs:"
            docker compose logs fastapi
            exit 1
          }
        timeout-minutes: 3

      # Cleanup containers and volumes
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up containers and volumes..."
          docker compose logs > docker-logs.txt
          docker compose down -v --remove-orphans

          echo "Docker logs from run:"
          cat docker-logs.txt
